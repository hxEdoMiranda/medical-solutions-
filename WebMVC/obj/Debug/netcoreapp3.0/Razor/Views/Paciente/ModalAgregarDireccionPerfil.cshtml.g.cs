#pragma checksum "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ac26c9967d5f31d2f18b0252d4b74c838d40a81f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Paciente_ModalAgregarDireccionPerfil), @"mvc.1.0.view", @"/Views/Paciente/ModalAgregarDireccionPerfil.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\_ViewImports.cshtml"
using WebMVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\_ViewImports.cshtml"
using WebMVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ac26c9967d5f31d2f18b0252d4b74c838d40a81f", @"/Views/Paciente/ModalAgregarDireccionPerfil.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d07e873f05b36c9d83cd6a184d4bfbe1720fee4b", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Paciente_ModalAgregarDireccionPerfil : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<WebMVC.Models.ModalDirecciones>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 7 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
  
    string titulo = string.Empty;
    string porDefecto = string.Empty;
    string direccionDefecto = string.Empty;
    

    if (Model.Type == "E")
    {
        titulo = "Busca la dirección para toma de Exámenes";
        porDefecto = "Usar dirección para toma de Medicamentos";
        direccionDefecto = "La dirección de toma de exámenes es:";
    }
    else if (Model.Type == "P")   //Abrir Modal Perfil Paciente
    {
        titulo = "Busca la dirección para tu perfil";
        porDefecto = "Usar dirección para tu perfil";
        direccionDefecto = "La dirección de toma de tu perfil es:";
    }
    else
    {
        titulo = "Busca la dirección para los Medicamentos";
        porDefecto = "Usar dirección para despacho de Exámenes";
        direccionDefecto = "La dirección de toma de medicamentos es:";
    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .pac-container.pac-logo {
        position: absolute !important;
        z-index: 100000 !important;
    }
    /*
                                        #input-autocomplete {
                                            width: 50%;
                                        }*/
</style>

<!-- Modal Map -->

<div class=""wow-modal-overlay"">
    <div class=""wow-modal wow-modal__container"">
        <div class=""wow-modal__header"">
            <h1 class=""title-Busca_Direccion"">
                ");
#nullable restore
#line 50 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
           Write(titulo);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            </h1>

            <button id=""btn-close-modal"" class=""close-modal_direccion"">
                <i class=""fal fa-times""></i>
            </button>
        </div>
        <div class=""wow-modal__body"">

            <div class=""wow-modal__address"">
                <input id=""input-autocomplete"" class=""buscar-Direccion"" type=""text"" "">
");
            WriteLiteral("                <div class=\"address\">\r\n                    <div class=\"legend-address\">\r\n                        <label for=\"por-defecto\">");
#nullable restore
#line 64 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                            Write(direccionDefecto);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</label>
                    </div>
                    <div id=""new-address"" class=""new_address""></div>
                    <div id=""new-address-error"" class=""address"" style=""color: red;""></div>
                </div>
                <div class=""container__legend-address"">
                    <div class=""legend-address"" id=""departamento"">
                        <p class=""address_legend-wow"">Piso/Departamento</p>
                        <input type=""text"" class=""legend-address form-control"" id=""departamento_address"" value="""" placeholder=""Ingresa el apartamento"">
                    </div>
                    <div class=""legend-address"" id=""referencia"">
                        <p class=""address_legend-wow"">Referencia</p>
                        <input type=""text"" class=""legend-address form-control"" id=""referencia_address"" value="""" placeholder=""Ingresa tu la referencia"">
                    </div>
                </div>
            </div>
            <div class=""map-container"">
               ");
            WriteLiteral(@" <div id=""map""></div>
            </div>
        </div>
        <div class=""wow-modal__footer"">
            <div id=""check-direccion"" class=""modal-checker_direccion"">
                <input id=""por-defecto"" type=""checkbox"">
                <label style=""vertical-align: middle;"" for=""por-defecto"">");
#nullable restore
#line 87 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                                                    Write(porDefecto);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</label>
            </div>
            <button id=""guardar-direccion"" class=""btn btn-primary btn-guardar_direccion"">
                Guardar Dirección
            </button>
        </div>
    </div>
</div>
<!-- end::Modal Map -->

<script type=""text/javascript"">
    (function () {
        if (window.contieneExamenes == 0 || window.contieneMedicamentos == 0 || """);
#nullable restore
#line 99 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                                                            Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" == \"P\") {\r\n            $(\"#check-direccion\").css(\"visibility\", \"hidden\");\r\n        }\r\n        const data = ");
#nullable restore
#line 102 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
        var map;
        var autocomplete;
        var marker;
        var direccion;
        var service;

        // Functions
        const initAutocomplete = function () {
            debugger;
            let input = document.getElementById(""input-autocomplete"");
            let paisPaciente;
            let codigoTelefonoPaciente = """);
#nullable restore
#line 114 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                     Write(Model.Patient.CodigoTelefono);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";

            if (codigoTelefonoPaciente === ""MX"") {
                paisPaciente = ""mx""; // Código para México
            } else if (codigoTelefonoPaciente === ""CL"") {
                paisPaciente = ""cl""; // Código para Chile
            } else {
                paisPaciente = ""cl""; // País por defecto
            }

            let options = {
                types: [""address""],
                componentRestrictions: { country: paisPaciente }
            }

            autocomplete = new google.maps.places.Autocomplete(input, options);
            autocomplete.addListener(""place_changed"", function () {
                const place = autocomplete.getPlace();
                marker?.setMap(null);
                $(""#new-address"").empty();
                $(""#new-address-error"").empty();

                if (place.address_components !== undefined) {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                    marker = new google");
            WriteLiteral(@".maps.Marker({
                        position: place.geometry.location,
                        map: map
                    });

                    direccion = fillDirection(place);
                } else {
                    let request = {
                        query: place.name,
                        fields: [""name"", ""place_id""],
                    };

                    service.findPlaceFromQuery(request, function (results, status) {
                        if (status === google.maps.places.PlacesServiceStatus.OK) {
                            if (results.length > 0) {
                                let request = {
                                    placeId: results[0].place_id,
                                    fields: [""name"", ""formatted_address"", ""geometry"", ""address_component""]
                                };

                                service.getDetails(request, function (detail, status) {
                                    if (status == google.maps.place");
            WriteLiteral(@"s.PlacesServiceStatus.OK) {
                                        direccion = fillDirection(detail, true);
                                        map.setCenter(detail.geometry.location);
                                        map.setZoom(17);
                                        marker = new google.maps.Marker({
                                            position: detail.geometry.location,
                                            map: map
                                        });
                                    }
                                });
                            }
                        } else {
                            $(""#new-address-error"").html(""Sin resultados"");
                        }
                    });
                }
            })
        }

        const fillDirection = function (place, searched = false) {
            let direccionFormateada = place.formatted_address;
            $(""#new-address"").html(direccionFormateada);

        ");
            WriteLiteral(@"    if (searched)
                $(""#input-autocomplete"").val(direccionFormateada);

            $(""#input-autocomplete"").blur();

            const numero = place.address_components.find(el => el.types[0] === ""street_number"")?.long_name ?? ""S/N"";
            const calle = place.address_components.find(el => el.types[0] === ""route"")?.long_name ?? """";
            const nombreCiudad = place.address_components.find(el => el.types[0] === ""locality"")?.long_name ?? place.address_components.find(el => el.types[0] === ""administrative_area_level_3"")?.long_name ?? """";
            const nombreRegion = place.address_components.find(el => el.types[0] === ""administrative_area_level_1"")?.long_name ?? """";
            const nombrePais = place.address_components.find(el => el.types[0] === ""country"")?.long_name ?? """";
            const codigoPais = place.address_components.find(el => el.types[0] === ""country"")?.short_name ?? """";
            const codigoPostal = place.address_components.find(el => el.types[0] === ""po");
            WriteLiteral(@"stal_code"")?.short_name ?? """";
            const latitud = place.geometry.location.lat();
            const longitud = place.geometry.location.lng();

            return {
                direccion: direccionFormateada,
                numero: numero,
                calle: calle,
                nombreCiudad: nombreCiudad,
                nombreRegion: nombreRegion,
                nombrePais: nombrePais,
                codigoPais: codigoPais,
                codigoPostal: codigoPostal,
                latitud: latitud.toString(),
                longitud: longitud.toString(),
                userId: ");
#nullable restore
#line 209 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                   Write(Model.UserId);

#line default
#line hidden
#nullable disable
            WriteLiteral(",\r\n                tipo: \"");
#nullable restore
#line 210 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                  Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                departamento: departamento.toString(),
                referencia: referencia.toString(),
                idPersona: modelVista.id
            }
        }

        const validateDirection = function () {
            $(""#new-address-error"").empty();
            if (!direccion) {
                $(""#new-address-error"").html(""Debe seleccionar una dirección"");
                return;
            } else if (direccion.numero === """" || direccion.numero === ""S/N"") {
                Swal.fire(""¡Ups! La dirección no se guardó."", ""Por favor ingrese una dirección con número e inténtalo nuevamente"", ""error"");
                return;
            } else {
                saveDirection();
            }
        }

        const saveDirection = async function () {
            try {
                
                let response = null;
                const porDefecto = $(""input#por-defecto"").is("":checked"");
                if (""");
#nullable restore
#line 235 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" == \"E\") {\r\n                    direccion.porDefectoExamenes = porDefecto;\r\n                } else if (\"");
#nullable restore
#line 237 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                       Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" == \"M\") {\r\n                    direccion.porDefectoMedicamentos = porDefecto;\r\n                }\r\n                //Guardar dirección en perfil del paciente\r\n                else if (\"");
#nullable restore
#line 241 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                     Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" == \"P\") {\r\n                    direccion.porDefectoPerfil = true;\r\n                    response = await fetch(`${window.baseUrl}/usuarios/personas/SaveAddAddress/");
#nullable restore
#line 243 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                                                                          Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"`, {
                        method: ""POST"",
                        headers: {
                            ""Accept"": ""application/json"",
                            ""Content-Type"": ""application/json""
                        },
                        body: JSON.stringify(direccion)
                    });
                    if (response.ok) {
                        $(""#profileAddress"").val(direccion.direccion);
                    }
                    else if (!response.ok) {
                        Swal.fire(""¡Ups! Algo salió mal."", ""La dirección no se guardó en la tabla personas, por favor, inténtalo nuevamente"", ""error"");
                        console.error(response)
                        return;
                    }
                } else {
                    Swal.fire(""¡Ups! Algo salió mal."", ""Tipo de dirección no válido, por favor, inténtalo nuevamente"", ""error"");
                    return;
                }

                if (response.ok) {

                    var p");
            WriteLiteral("aciente = ");
#nullable restore
#line 266 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                              Write(Html.Raw(Json.Serialize(Model.Patient)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
                    var data = await response.json();
                    const billing_address = {
                        region: data.nombreRegion,
                        region_id: parseInt(data.idRegion),
                        region_code: data.codigoRegion,
                        country_id: data.codigoPais,
                        street: [
                            data.calle,
                            data.numero,
                            data.departamento,
                            data.referencia
                        ],
                        telephone: paciente.telefonoMovil,
                        postcode: data.codigoPostal,
                        city: data.nombreCiudad,
                        firstname: paciente.nombre,
                        lastname: paciente.apellidoPaterno,
                        customer_id: data.userId,
                        email: paciente.correo,
                        same_as_billing: 0,
                        save_in_a");
            WriteLiteral("ddress_book: 0\r\n                    }\r\n                    var check = $(\"input#por-defecto\").prop(\"checked\");\r\n\r\n                    if (\"");
#nullable restore
#line 291 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                    Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" === ""M"") {

                        window.billing_address = billing_address;

                        $(""#agregar-direccion-medicamentos"").html(data.direccion);
                        const button = document.getElementById(""agregar-direccion-medicamentos"");
                        button.setAttribute(""iddireccion"", data.id);
                        $(""#seleccionar-direccion-medicamentos"").show();

                        if (check) {
                            window.billing_addressEx = billing_address;
                            $(""#agregar-direccion-examenes"").html(data.direccion);
                            const buttonEx = document.getElementById(""agregar-direccion-examenes"");
                            buttonEx.setAttribute(""iddireccion"", data.id);
                            $(""#seleccionar-direccion-examenes"").show();
                        }

                    }
                    else if (""");
#nullable restore
#line 309 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                         Write(Model.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" === ""E"") {

                        window.billing_addressEx = billing_address;
                        const button = document.getElementById(""agregar-direccion-examenes"");
                        button.setAttribute(""iddireccion"", data.id);
                        $(""#agregar-direccion-examenes"").html(data.direccion);
                        $(""#seleccionar-direccion-examenes"").show();
                        if (check) {
                            window.billing_address = billing_address;
                            $(""#agregar-direccion-medicamentos"").html(data.direccion);
                            const buttonMed = document.getElementById(""agregar-direccion-medicamentos"");
                            buttonMed.setAttribute(""iddireccion"", data.id);
                            $(""#seleccionar-direccion-medicamentos"").show();
                        }
                    }

                    $(""#btn-close-modal"").click();
                } else {
                    Swal.fire(""¡Ups!");
            WriteLiteral(@" Algo salió mal."", ""La dirección no se guardó, por favor, inténtalo nuevamente"", ""error"");
                    console.error(response)
                }
            } catch (error) {
                console.error(""SaveDireccion"", error);
            }
        }

        $(""#btn-close-modal"").click((e) => {
            $(""#dynamic-modal"").empty();
            $(""#dynamic-modal-div"").modal(""hide"");
        });

        $(""#guardar-direccion"").click(() => {

            direccion.departamento = $(""#departamento_address"")?.val() ?? """";
            direccion.referencia = $(""#referencia_address"")?.val() ?? """";
            direccion.direccion += (direccion.departamento != """") ? "". Depto/Piso: "" + direccion.departamento : """";
            direccion.direccion += (direccion.referencia != """") ? "". Referencia: "" + direccion.referencia : """";
            validateDirection();
        });

        // Attach your callback function to the `window` object
        delete window.initMap;
        window.init");
            WriteLiteral("Map = function () {\r\n\r\n            let centroMapa;\r\n            let codigoTelefonoPaciente = \"");
#nullable restore
#line 354 "D:\PRODUCTOBASE001-FULL\WebMVC\Views\Paciente\ModalAgregarDireccionPerfil.cshtml"
                                     Write(Model.Patient.CodigoTelefono);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";

            if (codigoTelefonoPaciente === ""MX"") {
                centroMapa = { lat: 19.4326, lng: -99.1332 }; // Coordenadas para Ciudad de México, México
            } else if (codigoTelefonoPaciente === ""CL"") {
                centroMapa = { lat: -33.4489, lng: -70.6693 }; // Coordenadas para Santiago, Chile
            } else {
                centroMapa = { lat: -33.4489, lng: -70.6693 }; // Centro por defecto (Santiago, Chile)
            }

            // JS API is loaded and available
            map = new google.maps.Map(document.getElementById(""map""), {
                center: centroMapa,
                zoom: 12,
            });

            service = new google.maps.places.PlacesService(map);

            initAutocomplete()
        };

        if (typeof google === ""undefined"") {
            // Create the script tag, set the appropriate attributes
            var script = document.createElement(""script"");
            script.src = ""https://maps.googleapis.com/maps/api/");
            WriteLiteral(@"js?key=AIzaSyC9igtLSgxipwioIXKuCcKst89eZCF847o&libraries=places&callback=initMap"";
            script.async = true;

            // Append the ""script"" element to ""head""
            document.head.appendChild(script);
        } else {
            window.initMap();
        }
    })();


</script>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WebMVC.Models.ModalDirecciones> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
